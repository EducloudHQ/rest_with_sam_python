AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'rest_weather_api

  Sample SAM Template for rest_weather_api

  '
Globals:
  Function:
    Runtime: python3.10
    CodeUri: src/
    Timeout: 3
    MemorySize: 128
    Environment:
      Variables:
        TABLE_NAME:
          Ref: WeatherTable
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    Cors:
      AllowMethods: '''OPTIONS,POST,GET,PUT,DELETE'''
      AllowHeaders: '''Content-Type'''
      AllowOrigin: '''*'''
Resources:
  WeatherApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Description: serverless api for weather application
  CreateWeather:
    Type: AWS::Serverless::Function
    Description: Lambda function inserts weather data into DynamoDB table
    Properties:
      FunctionName: CreateWeatherLambda
      Handler: create_weather.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /create-weather
            Method: POST
            RestApiId:
              Ref: WeatherApi
      CodeUri: CreateWeather
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.CreateWeathera340834fDepLayer
    Connectors:
      addWeatherItemToDB:
        Properties:
          Destination:
            Id: WeatherTable
          Permissions:
          - Write
    Metadata:
      SamResourceId: CreateWeather
  UpdateWeather:
    Type: AWS::Serverless::Function
    Description: Lambda function updates weather item in DynamoDB table
    Properties:
      FunctionName: UpdateWeatherLambda
      Handler: update_weather.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /weather/{id}
            Method: PUT
            RestApiId:
              Ref: WeatherApi
      CodeUri: UpdateWeather
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.UpdateWeathera334e6b7DepLayer
    Connectors:
      updateWeatherItemToDB:
        Properties:
          Destination:
            Id: WeatherTable
          Permissions:
          - Write
    Metadata:
      SamResourceId: UpdateWeather
  GetWeather:
    Type: AWS::Serverless::Function
    Description: Lambda function gets weather item in DynamoDB table
    Properties:
      FunctionName: GetWeatherLambda
      Handler: get_weather.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /weather/{id}
            Method: GET
            RestApiId:
              Ref: WeatherApi
      CodeUri: GetWeather
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.GetWeather8a631b68DepLayer
    Connectors:
      getWeatherItemToDB:
        Properties:
          Destination:
            Id: WeatherTable
          Permissions:
          - Read
    Metadata:
      SamResourceId: GetWeather
  WeatherTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: /Users/rosius/Documents/rest_weather_api/.aws-sam/auto-dependency-layer/adl_nested_template.yaml
    Type: AWS::CloudFormation::Stack
Outputs:
  WeatherApi:
    Description: API Gateway endpoint URL for dev stage for create weather function
    Value:
      Fn::Sub: https://${WeatherApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
  CreateWeatherFunction:
    Description: Create Weather Lambda Function ARN
    Value:
      Fn::GetAtt:
      - CreateWeather
      - Arn
